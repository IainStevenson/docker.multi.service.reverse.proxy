{
	"info": {
		"_postman_id": "f7308fe5-ee6b-4ea4-b05e-4ab7a1087193",
		"name": "local.myinfo.world",
		"description": "A docker orchestration of multiple microservices behind a proxy uysing https and letsencrypt.\r\nAuthentication and authorisation are not included its a simple https scheme for transport security and endpoint validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1467123"
	},
	"item": [
		{
			"name": "Identity",
			"item": [
				{
					"name": "Get Identity Server Well known openid configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"postCount\", 0)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"postCount\", 0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/identity/.well-known/openid-configuration",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"identity",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mvc",
			"item": [
				{
					"name": "Test access to Support with /support/home/privacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/support/home/privacy",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"support",
								"home",
								"privacy"
							]
						},
						"description": "Test required  direct access to Container 2 (Support) (support) "
					},
					"response": []
				},
				{
					"name": "Test access to Store by default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/store",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"store"
							]
						},
						"description": "Test required  direct access to Container 1 (Store) (store) "
					},
					"response": []
				},
				{
					"name": "Test access to Store with /store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/store",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"store"
							]
						},
						"description": "Test required  direct access to Container 1 (Store) (store) "
					},
					"response": []
				},
				{
					"name": "Test access to Store with /store/home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/store/home",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"store",
								"home"
							]
						},
						"description": "Test required  direct access to Container 1 (Store) (store) "
					},
					"response": []
				},
				{
					"name": "Test access to Store with /store/home/privacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/store/home/privacy",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"store",
								"home",
								"privacy"
							]
						},
						"description": "Test required  direct access to Container 1 (Store) (store) "
					},
					"response": []
				},
				{
					"name": "Test access to Store with /store/weatherforecast redirects to login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.text().includes(\"<title>IdentityServer4</title>\");\r",
									"    pm.response.text().includes(\"<h1>Login</h1>\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/store/weatherforecast",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"store",
								"weatherforecast"
							]
						},
						"description": "Test required  direct access to Container 1 (Store) (store) "
					},
					"response": []
				},
				{
					"name": "Test access to Support with /support/home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/support/home",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"support",
								"home"
							]
						},
						"description": "Test required  direct access to Container 2 (Support) (support) "
					},
					"response": []
				},
				{
					"name": "Test access to Support with /support",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/support",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"support"
							]
						},
						"description": "Test required  direct access to Container 2 (Support) (support) "
					},
					"response": []
				}
			]
		},
		{
			"name": "Api",
			"item": [
				{
					"name": "Resource",
					"item": [
						{
							"name": "CRUD",
							"item": [
								{
									"name": "POST is Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var postCount = pm.collectionVariables.get(\"postCount\");\r",
													"postCount ++;\r",
													"\r",
													"pm.collectionVariables.set(\"postCount\", postCount)\r",
													"console.log(\"Post count: \", postCount)\r",
													"\r",
													"pm.test(\"Extract Last Values\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    console.log('lastId', jsonData.id);\r",
													"    pm.collectionVariables.set('lastId', jsonData.id)\r",
													"    console.log('lastETag', jsonData.etag);\r",
													"    pm.collectionVariables.set('lastETag', jsonData.etag);\r",
													"    console.log('lastModified', jsonData.created);\r",
													"    pm.collectionVariables.set('lastModified', jsonData.created);\r",
													"    console.log('beforeLastModified', jsonData.created);\r",
													"    pm.collectionVariables.set('beforeLastModified', jsonData.created);\r",
													"    console.log('lastContentKeys', jsonData.content);\r",
													"    pm.collectionVariables.set('lastContentKeys', jsonData.content)\r",
													"    console.log('lastKeyValue', jsonData.content.id);\r",
													"    pm.collectionVariables.set('lastKeyValue', jsonData.content.id)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);  \r",
													"    \r",
													"    var locationHeader = pm.response.headers.get(\"Location\");\r",
													"    console.log(\"Location header: \", locationHeader)\r",
													"\r",
													"    var locationHeaderElements = locationHeader.split('/');\r",
													"    console.log(\"Location header Elements: \", locationHeaderElements)\r",
													"    console.log(\"# Location header Elements: \", locationHeaderElements.length)\r",
													"\r",
													"    var crudId = locationHeaderElements[locationHeaderElements.length-1];\r",
													"\r",
													"    console.log(\"Location header ID: \", crudId)\r",
													"\r",
													"    pm.environment.set('crudId', crudId);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateNow= new Date();\r",
													"console.log('Time Now: setting beforeLastModified' , dateNow.toISOString());\r",
													"pm.collectionVariables.set('beforeLastModified', dateNow.toISOString())"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{$randomInt}}, \r\n    \"temperatureC\": 37,\r\n    \"summary\": \"Balmy\"\r\n}"
										},
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}?keys=id",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}"
											],
											"query": [
												{
													"key": "keys",
													"value": "id"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET is OK by namespace and id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET is NotModified if-modified-since lastmodified",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 304\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Modified-Since",
												"value": "{{lastModified}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET is OK if-none-match oldetag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-None-Match",
												"value": "oldetag",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET is NotModified if-none-match last etag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 304\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-None-Match",
												"value": "{{lastETag}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT is OK for update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Extract Last Values\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    console.log('lastId', jsonData.id);\r",
													"    pm.collectionVariables.set('lastId', jsonData.id)\r",
													"    console.log('lastETag', jsonData.etag);\r",
													"    pm.collectionVariables.set('lastETag', jsonData.etag);\r",
													"    console.log('lastModified', jsonData.created);\r",
													"    pm.collectionVariables.set('lastModified', jsonData.created);\r",
													"    console.log('lastContentKeys', jsonData.content);\r",
													"    pm.collectionVariables.set('lastContentKeys', jsonData.content)\r",
													"    console.log('lastKeyValue', jsonData.content.id);\r",
													"    pm.collectionVariables.set('lastKeyValue', jsonData.content.id)\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateNow= new Date();\r",
													"console.log('Time Now: setting beforeLastModified' , dateNow.toISOString());\r",
													"pm.collectionVariables.set('beforeLastModified', dateNow.toISOString())\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"id\": {{lastKeyValue}}, \r\n     \"temperatureC\": 38,\r\n    \"summary\": \"Balmy\",\r\n    \"status\": \"adjusted\"\r\n}"
										},
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET is OK from namespace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var postCount = pm.collectionVariables.get(\"postCount\");\r",
													"var maxPostCount = pm.collectionVariables.get(\"maxPostCount\");\r",
													"if ( postCount < maxPostCount)\r",
													"{\r",
													"    console.log(\"Re-running POST\")\r",
													"    postman.setNextRequest(\"POST is Created\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE is PreConditionFailed on delete with wrong timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 412\", function () {\r",
													"    pm.response.to.have.status(412);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Unmodified-Since",
												"value": "{{beforeLastModified}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE is PreConditionFailed on delete with different etag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 412\", function () {\r",
													"    pm.response.to.have.status(412);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "badetag",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE is NoContent on delete with Match eTag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{lastETag}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE is NotFound on re-delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{currentAccessToken}}.eyJuYmYiOjE2MDgwMjY0OTgsImV4cCI6MTYwODAzMDA5OCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2lkZW50aXR5IiwiYXVkIjoibWlDb25zZW50LkFwaSIsImNsaWVudF9pZCI6IjM2ODQ0QTZCLUEyM0UtNEY2OS1CNDU2LTQzQzFFOTVFOUVGMSIsInN1YiI6IjgwOWJmNDE3LTNkNWQtNDJlMi04OTAzLThlNzljYmUwYzEyYiIsImF1dGhfdGltZSI6MTYwODAyNjQ5NywiaWRwIjoibG9jYWwiLCJlbWFpbCI6InNkay5hbGljZUBtaUNvbnNlbnQuY29tIiwic2NvcGUiOlsibWlDb25zZW50LkFwaSJdLCJhbXIiOlsicHdkIl19.P1KxhAHZPwrWYCb9LjDQEv_ZteQPd1VDjWIkyWB0cOg9rK3uJ75ovLlcUqdJGuImjVVFaFp3eAFR5AqND8N1yqN1wg4MCa8IkN7YKv-KN5QnqtTLC3u81vj0xEKzfa_tXZirxEnv9N4Uz_Tw_-6nfPFT5qQcPXATq7Y_F51dp9sUoywcFEQdaQ6FeSAbKN7B86OEOE5kpbayCE6q7zk6-f_AwNcF1SOROXG8GHAUjPnw_pGg4nsbmvsFIQWk3fW9hgDJ3QsH94VLIuXVr_tEIah65iLbaq1wJUt-zUzyJcAEs8WpJE-rX15OE87IZn1ITHmL-xc14dAMCBxoW-hVQw",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUri}}/api/resources/{{namespace}}/{{lastId}}",
											"host": [
												"{{baseUri}}"
											],
											"path": [
												"api",
												"resources",
												"{{namespace}}",
												"{{lastId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'https://local.myinfo.world/identity/connect/token',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/x-www-form-urlencoded',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: 'grant_type=client_credentials&scope=myApi&client_id=Command&client_secret=secret'",
					"  }",
					"};",
					"",
					"if (!pm.environment.get('accessTokenExpiry') || ",
					"    !pm.environment.get('currentAccessToken')) {",
					"    console.log('Token or expiry date are missing')",
					"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
					"    console.log('Token is expired')",
					"} else {",
					"    getToken = false;",
					"    console.log('No need to get a Token as expiry not passed');",
					"}",
					"",
					"getToken = true;",
					"",
					"if (getToken === true) {",
					"    console.log('Requesting token...');",
					"    pm.sendRequest(echoPostRequest, function (err, res) {",
					"        if (err === null) {",
					"            console.log('Token recieved, saving the token and expiry date')",
					"            var responseJson = res.json();",
					"            pm.environment.set('currentAccessToken', responseJson.access_token)",
					"    ",
					"            var expiryDate = new Date();",
					"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
					"        }",
					"        else {",
					"            console.log('Error getting token', res.json());",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUri",
			"value": "https://local.myinfo.world"
		},
		{
			"key": "currentAccessToken",
			"value": ""
		},
		{
			"key": "lastId",
			"value": ""
		},
		{
			"key": "dataIdentifier",
			"value": "0",
			"type": "string"
		},
		{
			"key": "postCount",
			"value": "0",
			"type": "string"
		},
		{
			"key": "lastModified",
			"value": ""
		},
		{
			"key": "lastETag",
			"value": "123",
			"type": "string"
		},
		{
			"key": "lastContentKeys",
			"value": "",
			"type": "string"
		},
		{
			"key": "lastKeyValue",
			"value": "",
			"type": "string"
		},
		{
			"key": "namespace",
			"value": "weatherforecast",
			"type": "string"
		},
		{
			"key": "beforeLastModified",
			"value": "",
			"type": "string"
		},
		{
			"key": "maxPostCount",
			"value": "2",
			"type": "string"
		}
	]
}