{
	"info": {
		"_postman_id": "eb8e0cf4-04de-40a6-8f9d-4ae1e0728cb2",
		"name": "mystore.local",
		"description": "A docker orchestration of multiple microservices behind a proxy uysing https and letsencrypt.\r\nAuthentication and authorisation are not included its a simple https scheme for transport security and endpoint validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://mystore.local/identity/.well-known/openid-configuration",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/identity/.well-known/openid-configuration",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"identity",
						".well-known",
						"openid-configuration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test access to Store by default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/store",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"store"
					]
				},
				"description": "Test required  direct access to Container 1 (WebApp1) (store) "
			},
			"response": []
		},
		{
			"name": "Test access to Store with /store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/store",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"store"
					]
				},
				"description": "Test required  direct access to Container 1 (WebApp1) (store) "
			},
			"response": []
		},
		{
			"name": "Test access to Store with /store/home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/store/home",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"store",
						"home"
					]
				},
				"description": "Test required  direct access to Container 1 (WebApp1) (store) "
			},
			"response": []
		},
		{
			"name": "Test access to Store with /store/home/privacy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/store/home/privacy",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"store",
						"home",
						"privacy"
					]
				},
				"description": "Test required  direct access to Container 1 (WebApp1) (store) "
			},
			"response": []
		},
		{
			"name": "Test access to Support with /support",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/support",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"support"
					]
				},
				"description": "Test required  direct access to Container 2 (WebApp2) (support) "
			},
			"response": []
		},
		{
			"name": "Test access to Support with /support/home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/support/home",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"support",
						"home"
					]
				},
				"description": "Test required  direct access to Container 2 (WebApp2) (support) "
			},
			"response": []
		},
		{
			"name": "Test access to Support with /support/home/privacy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/support/home/privacy",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"support",
						"home",
						"privacy"
					]
				},
				"description": "Test required  direct access to Container 2 (WebApp2) (support) "
			},
			"response": []
		},
		{
			"name": "POST Data to the secured API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"pm.test(\"Location header is present\", function () {\r",
							"    pm.response.to.have.header(\"Location\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"temperatureC\": 37,\r\n    \"temperatureF\": 98,\r\n    \"summary\": \"Balmy\"\r\n}"
				},
				"url": {
					"raw": "https://mystore.local/api/weatherforecast",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"api",
						"weatherforecast"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Data from the secured API",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://mystore.local/api/weatherforecast",
					"protocol": "https",
					"host": [
						"mystore",
						"local"
					],
					"path": [
						"api",
						"weatherforecast"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessTokenUrl",
				"value": "https://mystore.local/identity/connect/token",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "api1",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "client",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "client_credentials",
				"type": "string"
			},
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "bob",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://miconsent.com/identity/connect/authorize",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "secret",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "API-Test",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"  url: 'https://mystore.local/identity/connect/token',",
					"  method: 'POST',",
					"  header: 'Content-Type:application/x-www-form-urlencoded',",
					"  body: {",
					"    mode: 'application/json',",
					"    raw: 'grant_type=client_credentials&scope=api1&client_id=client&client_secret=secret'",
					"  }",
					"};",
					"",
					"var getToken = true;",
					"",
					"if (!pm.environment.get('accessTokenExpiry') || ",
					"    !pm.environment.get('currentAccessToken')) {",
					"    console.log('Token or expiry date are missing')",
					"} else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
					"    console.log('Token is expired')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiry date are all good');",
					"}",
					"",
					"if (getToken === true) {",
					"    pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"        if (err === null) {",
					"            console.log('Saving the token and expiry date')",
					"            var responseJson = res.json();",
					"            pm.environment.set('currentAccessToken', responseJson.access_token)",
					"    ",
					"            var expiryDate = new Date();",
					"            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"            pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseutrl",
			"value": "https://mystore.local"
		}
	]
}